/*CSS follows a strict format:
selector{
property: value;
poperty: value;
}
The selector tells the browser which element is going to receive the styles rules, that are expressed as a list: 'property:value'. Each property needs to be separated with a semi-colon.
It is possible to select more then one element, just separate them with an comma:
selector 1,
selector 2{
property: value;
}
To select elements with a class use a full stop after the name of the element and write the class name, or just use a full stop and the
class name to apply the style rules to all the elements in that class:
selector.class{
property: value;
}
or
.class{
property: value;
}*/
*{ /*The * selector selects all elements.The box-sizing property defines how the width and height of an element are calculated, in this case it will calculate including the content, padding and border*/
  margin: 0px;
  padding: 0px;
  box-sizing: border-box;
}
body{
  font-family: 'Rubik', sans-serif; /*this CSS rule was used to add the font from Google Fonts to all the body's page*/
  background-color: #078544; /*This rule in CSS is used to change the background colour*/
  color: #F6FFFF; /*The color rule in CSS is used to change the text colours*/
}
header{
  text-align: center;
  align-items: center; /*to align the header text to the center of the page*/
  letter-spacing: 1px; /*changes the space between the letters*/
  position: relative; /*The position property specifies the type of positioning method used for an element - in this case the element is positioned relative to its normal position*/
  font-size: 25px; /* used to change the sizeof the font*/
  padding-bottom: 40px; /*used the padding rule to increase, by 40 pixels, the spacing between the content and the edge of the element*/
}
.subtitle{
  font-size: 25px; /* used to change the sizeof the font*/
}
.background{
  background-image: url("../img/header_background/header.jpg"); /*Adding a background image to an element can be done with this CSS property. The value for the property uses the url() CSS function to tell the browser where the image is.
  In this case, the background image is inside a folder called 'img' and has the name 'header_background'*/
  opacity: 0.8; /*this rule was used so that the text was clear to read*/
  background-size: cover; /*used to resize the background image to cover the entire container*/
  background-repeat: no-repeat; /* rule used to make the image only show once*/
  background-position: center 40%; /*used to position the image in the right place showing only the desired*/
  background-attachment: fixed; /*This rule is use to fix the background image to the page, that way, when scrolling up and down in the page, the image isn't going to scroll with it.*/
  position: absolute; /*The element is positioned relative to its first positioned ancestor element*/
  z-index: -1; /*the z-index specifies the stack order of an element. In this case the background image is behing the text and logo image*/
  width: 100%; /*sets the width and height to the whole page, even if not seen*/
  height: 100%;
}
.evora_logo{
  margin: 0 auto; /*these rules were used to set the size of the logo, place it in the middle of the page and create a spade betweent the logo and the text*/
  display: block;
  width: 170px;
  height: 210px;
  padding-top: 40px;
}
footer{
  background-color: #081B29; /*these CSS rules customize the footer, setting the background colour, the font size of the 'Website made by...' phrase and placing the width to occupy the whole page. The padding was added so that the text doesn't touches the sides of the page.*/
  font-size: 12px;
  width: 100%;
  padding: 10px;
}
.FUOSM{ /*the Social Media text was aligned to the center of the page using 'text-align'. The pading bottom was used to create more space between the text and the icons.*/
  text-align: center;
  font-size: 20px;
  padding-bottom: 15px;
}
.socialmedia{ /*To place the icons next to each other was used the display: flex and then were justified to the place around to give space before, between, and after them. Finally, the padding-left and right were used to centre the icons and the padding-bottom to create more space between the icons and the text.*/
  display: flex;
  justify-content: space-around;
  margin-left: 50px;
  margin-right: 50px;
  margin-bottom: 20px;
}
.twitter, .facebook, .instagram, .youtube{ /*used to set the width and height of every icon tothe same values*/
  width: 30px;
  height: 30px;
}
.burger{ /*these rules were used to set the position of the burger. The position is fixed which means that the element is positioned relative to the browser window, the element doesn't move with the page, he stays put in his position. Making it easy to access in every part of the page.*/
  display: block;
  cursor: pointer;
  position: fixed;
  top: 20px;
  right: 20px;
}
.burger div{ /*to create the burger form the divs were set to have a white background and the width and height were set to create the correct size of the three lines of the burger. The border radius was used to round the corners of the lines. The margin sets the space between the lines.*/
  width: 25px;
  height: 4px;
  background-color: white;
  margin: 5px;
  border-radius: 5px;
}
/*The next selectors and rules are customizing the nav. The background was set to the same colour as the page, and the menu occupies almost the whole page when open. The z-index was set to 10 so the menu stays on top of everything.
The menu is hidden on the right side (right: -100%), which changes once the function in JavaScript is activated. A CSS transition was added to smooth the arising of the menu. The overflow-y was set to scroll so the users can scroll down to access every option of the menu. */
nav{
  background-color: #078544;
  height: 100vh;
  width: 90vw;
  position: fixed;
  top: 0;
  z-index: 10;
  transition: right 0.3s ease-in;
  right: -100%;
}
.navbar{
  height: 100vh;
  width: 75vw;
  overflow-y: scroll;
}
/*These rules are customizing the list style and the text. On the main ul, the list style was set to none and the text was align to the left, adding padding so that the text doesn't touch the margin of the menu. The colour was set to the same used in the page
and a border with a light green was added. When hover/pressed the colour changes. To the second ul, a dot was added to the front of every li.*/
  nav ul{
    list-style: none;
    position: relative;
    text-align: left;
    padding-left: 40px;
    justify-content: space-around;
  }
  nav ul li a{
    text-decoration: none;
    color: #F6FFFF;
    font-size: 30px;
    font-weight: bold;
    line-height: 100px;
    border-bottom: 4px solid #37BFAF;
    padding-bottom: 3px;
}
nav ul li a:hover {
  color: #37BFAF;
}
nav ul ul{
  list-style: disc;
}
nav ul li ul li a{
  line-height: 60px;
  font-size: 25px;
  font-weight: 500;
  border-bottom: none;
}
/*The cover covers the whole page, but it's behind the menu. Its opacity was set to 0.4 so that it darkens the page, but it doesn't cover it completely.
It is by clicking on the cover that the menu closes.*/
#cover{
  position: fixed;
  top: 0;
  height: 100vh;
  width: 100vw;
  right: -100%;
  background-color: #243C52;
  opacity: 0.4;
}
.WWD,
.OH{
  text-align: center;      /*Basic CSS rules to set the size of the text and its position, for both heading and paragraphs.*/
  padding-top: 50px;
  padding-bottom: 40px;
  font-size: 30px;
}
.WWDp{
  text-align: center;
  padding-left: 30px;
  padding-right: 30px;
  font-size: 18px;
  padding-bottom: 20px;
  line-height: 30px;
}
.WWDp2{
  text-align: center;
  padding-left: 30px;
  padding-right: 30px;
  font-size: 18px;
  padding-bottom: 20px;
  line-height: 30px;
}
/*To create the shape a clip-path was used. The clip-path property allows clipping an element to a basic shape. In this case, a 'crooked rectangle' was made using the values of the clip-path.
Its height was set along with its width that should occupy the whole page. Its position must be set to relative to keep the child within bounds.*/
.mphoto{
  height: 400px;
  position: relative;
  clip-path: polygon(0 12%,0 100%,100% 88%,100% 0);
  max-width: 100%;
}
/*In order to change the opacity of the background image without affecting the text in it, the background was styled using a pseudo-element. This will ensure that the background image and the text content will be on their own “layer” in the parent.
To make that pseudo-element the same size as the parent, it is necessary to absolutely position it and set its top, right, bottom, and left values to zero so it doesn’t collapse. Also, as a pseudo-element, it needs to have the content property set, otherwise, it won’t show up on the page.
After that, the image was customized as desired using the 'background-' rules.*/
.mphoto::before{
  content: '';
  position: absolute;
  top: 0px;
  right: 0px;
  bottom: 0px;
  left: 0px;
  background-image: url("../img/DSC_0037.jpg");
  background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  opacity: 0.7;
}
/*In the text, the position needs to be set to relative so that it will be on top of the pseudo-element and background image.
Besides the basic rules to customize the text, the way used to place the text in the middle was by setting its top position to 50% and then transform the
Y-axis to -50%.*/
#mtext{
  position: relative;
  text-align: center;
  font-size: 50px;
  font-weight: bold;
  letter-spacing: 2px;
  justify-content: center;
  top: 50%;
  transform: translateY(-50%);
}
.OHp{
  text-align: center;  /*Basic CSS rules to set the size of the text and its position, for the paragraph.*/
  padding-left: 30px;
  padding-right: 30px;
  font-size: 18px;
  line-height: 30px;
}
.OHp a{
  color: #37BFAF; /*Used to change the colour of the anchor element inside the paragraph of text.*/
  font-weight: bold;
}
/*The div where the animation is going to happen needs to have a relative position, and the overflow set to hidden, to hide the parts of the image that get off the page, making it expand every time the image spins.*/
.rotation{
  position: relative;
  overflow: hidden;
  width: 100%;
}
/*All the images were set to the width and height there were created so that everything is placed properly in place. The earth was placed in the middle using the
'margin-left/right:auto' The images with the text were absolutely positioned and placed in the right place by setting the margin to auto and the
left and right properties to 0. In both the z-index was set to 1, so that these images are above the earth one. In the inner text, the opacity was set to
half as said in the proposal. Two different animations were created so that one could spin to the right and the other to the left.*/
#earth{
  width: 601.52px;
  height: 601.83px;
  max-width: 90%;
  display: block;
  margin-left: auto;
  margin-right: auto;
}
#innertext{
  width: 601.52px;
  height: 601.83px;
  max-width: 90%;
  position: absolute;
  margin: auto;
  left: 0;
  right: 0;
  z-index: 1;
  opacity: 0.5;
  animation: rotate 20s linear infinite;
}
#outertext{
  width: 601.52px;
  height: 601.83px;
  max-width: 90%;
  position: absolute;
  margin: auto;
  left: 0;
  right: 0;
  z-index: 1;
  animation: rotate1 20s linear infinite;
}
/*The animation is created by gradually changing from one set of CSS styles to another. In this case, the images will turn from 0 degrees to 360 or -360 in 20 seconds in an infinite way, meaning that it will not stop spinning.*/
@keyframes rotate { 0% { transform: rotate(0deg);} 100% {transform: rotate(360deg);} }
@keyframes rotate1 { 0% { transform: rotate(0deg);} 100% {transform: rotate(-360deg);} }

.OHp2{                       /*Basic CSS rules to set the size of the text and its position, for the paragraph.*/
  text-align: center;
  padding-left: 30px;
  padding-right: 30px;
  font-size: 18px;
  line-height: 30px;
  padding-bottom: 20px;
}
.CD{
  margin-bottom: 50px;
}
.countdown{
  display: flex; /*to place the days, hours, minutes and seconds next to each other, the display: flex was used. The content was justified to the center to centre the countdown in the middle of the page.*/
  justify-content: center;
  padding-top: 40px;
}
b{                                  /*Basic CSS rules used to set the size of the number and text and its position.*/
  font-size: 40px;
}
em{
  padding-right: 10px;
  font-weight: 500;
  font-size: 20px;
}
.countdowntext{
  text-align: center;
  font-weight: 500;
}
.PS{
  margin-left: 25px;
  margin-right: 25px;
  margin-top: 50px;                   /*Basic CSS rules used to set the size of the text (headings and pragraphs) and its position.*/
}
.PS a{
  text-decoration: none;
  color: #F6FFFF;
  border-bottom: 4px solid #37BFAF; /*The bordeer was added to emphazise the heading, making it easier to know that is a link to another page.*/
}
.PS img{
  max-width: 100%;
}
#PSh{
  margin-left: auto;   /*the right and left margins set to auto center the heading on the page*/
  margin-right: auto;
  text-align: left;
  font-size: 28px;
  margin-bottom: 30px;
}
.h2{
  padding: 25px;
}
.p1{
  margin-top: 20px;
}
/*The following rules customize the button. Setting its position on the page, its size and the background image. A box-shadow is also added to
add depth to the button. The corners were rounded using the border radius. The cursor was set to 'pointer', however, it can only be seen in the pc version since the mobile doesn't have a cursor.
The text also has a shadow to help it stand out from the image behind it.*/
.buttondiv{
  text-align: center;
  margin-top: 30px;
  margin-bottom: 30px;
}
.button {
  border: none;
  padding: 32px 32px;
  display: inline-block;
  color: #F6FFFF;
  text-align: center;
  text-decoration: none;
  font-weight: bold;
  font-size: 18px;
  text-shadow: 2px 2px 5px #081B29;
  cursor: pointer;
  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
  border-radius: 4px;
  width: 50%;
  position: relative;
  background-image: url("../img/strikes_and_actions/of_03.2019/IMG_1335.jpg");
  background-position: right;
  background-size: cover;
  background-repeat: no-repeat;
}
.h225,
.h227,
.h224,                               /*Since all the strikes pages have a similar layout, many selectors were assigned with the same rules*/
.h215,
.h2OA{
  text-align: center;    /*Used to align the heading in the centre and set its position and font size*/
  margin-top: 50px;
  margin-bottom: 40px;
  font-size: 30px;
}
.SaA,
.p25,
.p27,
.p24,
.p15{
  text-align: center;   /*Used to align the heading in the centre and set its position and font size*/
  padding-left: 30px;
  padding-right: 30px;
  font-size: 18px;
  line-height: 30px;
}
.p25 a{
  color: inherit;
  font-weight: 600;
  text-decoration: none;
  border-bottom: 4px solid #37BFAF; /*Used to give the anchor a border in the bottom with a specific colour*/
}
.goals{
  margin-left: 10%;  /*the left and right margins were set to a percentage so they could change depending on the size of the screen*/
  margin-top: 30px;
  margin-bottom: 30px;
  margin-right: 10%;
}
.goals h2{
  text-align: left;
  padding-bottom: 15px;
}
.goals ul li{
  list-style: none;
  padding-left: 20px;
  line-height: 35px;
  font-size: 22px;
}
.goals ul li ul li{
  list-style: initial; /*the list style was taken to the first li but added again to the second*/
  list-style-position: inside; /*The list-style-position property specifies the position of the list-item markers - inside means that the bullet points will be inside the list item*/
  font-size: 18px;
}
.row25{
  margin-top: 50px;
}
.column25{
  display: flex; /*the display was set to flex so that the photos can seat next to each other*/
}
.column25 img{
  width: 50%; /*the width was set to 50% so that both images could fit properly in the width of the page.*/
  cursor: pointer;
}
/*these rules were used to customize the background of the modal. The z-index was set to 11 so it above everything on the page.
The overflow property specifies what should happen if content overflows an element's box, in this case, if overflow is clipped, a scroll bar should be added to see the rest of the content
The modal has the width and height set to occupy the whole page*/
.modal{
  display: none;
  position: fixed;
  z-index: 11;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: #081B29;
}
/*the way used to place the image in the middle was by setting its top position to 50% and then transform the Y-axis to -50%.*/
.modal-content{
  position: relative;
  margin: auto;
  top: 50%;
  transform: translateY(-50%);
  width: 90%; /*the width was set to 90% so it doesn't occupy the entire page's width*/
}
.close{ /*the 'X''s colour was set to white and it was placed on the top right corner of the page*/
  color: white;
  position: absolute;
  top: 10px;
  right: 25px;
  font-size: 35px;
  font-weight: bold;
}
.close:hover,
.close:focus { /*even though it can only be seen in the pc view, when hovered the X it is going to change colour*/
  color: #999;
  text-decoration: none;
  cursor: pointer;
}
.slides{ /*the slides display is set to none but that it then change, on the JavaScript, when an image is pressed*/
  display: none;
}
.prev,
.next { /*these properties set the size, position and style of the next and previous buttons.*/
  cursor: pointer;
  position: absolute;
  top: 50%;
  width: auto;
  padding: 16px;
  margin-top: -50px;
  color: white;
  font-weight: bold;
  font-size: 20px;
  transition: 0.6s ease;
  border-radius: 0 3px 3px 0;
  user-select: none; /*The user-select property specifies whether the text of an element can be selected, the 'none' prevents text selection*/
}
.next {
  right: 0; /*Position the "next button" to the right*/
  border-radius: 3px 0 0 3px;
}
.prev:hover,
.next:hover { /*on the pc view, when hovered, the arrow gains a background colour*/
  background-color: rgba(0, 0, 0, 0.8);
}
.numbertext { /*style and postition the numbers on the top left of the image*/
  color: #f2f2f2;
  font-size: 18px;
  padding: 8px 12px;
  position: absolute;
  top: 0;
}
/*the next selectors for the gallery, columns and rows all have basically the same rules with different specifications.
The gallery establishes the distance between the gallery and the other page elements. Some galleries have the display set to flex to allow the image/column to seat next to each other.
The rows or column might also have the display set to flex to allow the images to sit next to each other. The width of the images is set depending on the number of images,
so that, when summed gives 100%, the full width of the page.*/
.gallery27,
.gallery24{
  display: flex;
  margin-top: 30px;
  margin-bottom: 30px;
}
.column27{
  width: 25%;
  display: flex;
  flex-direction: column;
}
.column27 img{
  max-width: 100%;
  cursor: pointer;
}
.row27{
  width: 75%;
  max-width: 100%;
  display: flex;
  flex-direction: column;
  cursor: pointer;
}
.route27 h2,
.route24 h2,
.route15 h2{
  text-align: center;
  padding-top: 10px;
  padding-bottom: 40px;
  font-size: 40px;
  text-decoration: underline;
  text-decoration-color: #37BFAF;
  letter-spacing: 2px;
}
iframe{ /*The border of the iframe was taken out so the frame could occupy the whole page's width.*/
  max-width: 100%;
  border: none;
}
.gallery24 img, /*the cursor changes to the pointer on the pc view to tell the visitor that it is possible to click on the images.*/
.gallery15 img,
.galleryoa img,
.galleryoa2 img{
  cursor: pointer;
}
.column24{
  width: 25%;
  max-width: 100%;
  display: flex;
  flex-direction: column;
}
.row24{
  display: flex;
  width: 75%;
  flex-direction: column;
  max-width: 100%;
}
.gallery15{
  margin-top: 30px;
  margin-bottom: 30px;
}
.row15{
  max-width: 100%;
  display: flex;
  flex-direction: row;
}
.row15 img,
.rowoa2 img{
  width: 33.33%;
}
.column15{
  display: flex;
  flex-direction: row;
  max-width: 100%;
}
.column15 img,
.rowoa1 img{
  width: 25%;
}
.BAW{
  margin-left: 10%;
  font-size: 28px;
  margin-bottom: 30px;
  text-decoration: underline;
  text-decoration-color: #37BFAF;
}
.LIVSAT{
  margin-left: 10%;
  text-decoration: underline;
  text-decoration-color: #37BFAF;
  font-size: 28px;
}
.LIVSATp{
  margin-left: 10%;
  padding: 10px;
}
.galleryoa{
  margin-top: 30px;
  margin-bottom: 40px;
}
.galleryoa2{
  margin-top: 20px;
  margin-bottom: 30px;
}
.rowoa1,
.rowoa2,
.rowoa3,
.rowoa4{
  display: flex;
  max-width: 100%;
}
.rowoa3 img{
  width: 20%;
}
.rowoa4 img{
  width: 25%;
}
.h2contact{
  text-align: center;
  margin-top: 50px;
  font-size: 30px;
}
.contactp{
  text-align: center;
  padding-left: 30px;
  padding-right: 30px;
  font-size: 18px;
  line-height: 30px;
  padding-top: 30px;
}
.containerform{ /*the container of the form was styled, a background colour was added as well as a border-radius to round the corners and a
  box-shadow to increase the depth. Its position was set using the margin rule and its width was set to 70%, occupying almost the whole page.*/
  border-radius: 5px;
  background-color: #f2f2f2;
  padding: 20px;
  color: #078544;
  width: 70%;
  margin: auto;
  margin-top: 40px;
  margin-bottom: 40px;
  box-shadow: 8px 6px 14px 2px rgba(38,38,38,0.19);
}
input[type=text], select, textarea { /*Style inputs with type="text", select elements and textareas*/
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box; /*Added to make sure that padding and width stays in place*/
  margin-top: 6px;
  margin-bottom: 16px;
  resize: vertical; /*Allow the user to vertically resize the textarea (not horizontally)*/
}
input[type=submit]{ /*style the submit button a specific background colour and size*/
  background-color: #078544;
  color: #F6FFFF; /*colour of the text in the button*/
  padding: 12px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer; /*the cursor changes to the pointer on the pc view to tell the visitor that it is possible to click on the button.*/
}
#status{ /*styling the status message and put its display to none. Once the button is pressed, with JavaScript, the display is going to change to 'block', showing the message.
A transition was added to ease the the appearance of the phrase.*/
  width: 100%;
  text-align: center;
  padding: 10px;
  font-size: 20px;
  margin-bottom: 30px;
  transition: all 0.5s ease;
  display: none;
}



@media screen and (min-width: 976px) and (min-height: 650px) {

  .burger{
    display: none;
  }
  #cover{
    display: none;
  }
  nav{
    right: inherit;
    display: inline-block;
    height: auto;
    width: 100%;
    top: inherit;
    position: relative;
    text-align: center;
    background-color: #37BFAF;
  }
    .navbar{
      width: auto;
      height: auto;
      padding: 0px;
      margin: 0px;
      position: relative;
      display: flex;
      justify-content: space-around;
      overflow-y: inherit;
  }
  nav ul li a{
      text-decoration: none;
      color: #F6FFFF;
      font-size: 18px;
      font-weight: normal;
      line-height: 70px;
      border-bottom: none;
      padding-bottom: 0;
  }
    nav ul ul{
      position: absolute;
      top: 80px;
      transition: top .3s;
      border-top: 3px solid white;
      padding: inherit;
      opacity: 0;
      visibility: hidden;
      list-style: none;
  }
  nav ul li:hover > ul{
    top: 70px;
    opacity: 1;
    visibility: visible;
}
  nav ul li a:hover {
    color: #078544;
  }
    nav ul li ul li a{
      line-height: none;
      font-size: 18px;
      font-weight: normal;
      padding-left: 20px;
    }
    nav ul ul li{
      position: relative;
      margin: 0px;
      width: 170px;
      float: none;
      display: list-item;
      border-bottom: 1px solid white;
      text-align: left;
      background: #37BFAF;
    }
    .WWDp2{
      padding-left: 250px;
      padding-right: 250px;
      line-height: 30px;
      padding-bottom: 50px;
    }
    .OHp{
      padding-left: 250px;
      padding-right: 250px;
      line-height: 30px;
      padding-bottom: 30px;
    }
    .OHp2{
      padding-left: 250px;
      padding-right: 250px;
      line-height: 30px;
      padding-top: 30px;
      padding-bottom: 40px;
    }
    b{
      font-size: 50px;
    }
    em{
      font-size: 25px;
    }
    .socialmedia{
      justify-content: center;
      margin-left: 0px;
      margin-right: 0px;
    }
    .twitter, .facebook, .instagram, .youtube{
      width: 30px;
      height: 30px;
      margin-right: 30px;
    }
    .twitter:hover, .facebook:hover, .instagram:hover, .youtube:hover{
      opacity: 0.5;
    }
    .PS{
      margin-left: 25%;
      margin-right: 25%;
    }
    .PS a{
      border-bottom: none;
    }
    .PS a:hover{
      border-bottom: 4px solid #37BFAF
    }
    #PSh{
      padding-left: 50px;
    }
    .first, .second, .third, .fourth{
      display: flex;
      margin-top: 30px;
      margin-bottom: 30px;
    }
    .second, .fourth{
      flex-direction: row-reverse;
    }
    .PS img{
      width: 50%;
      height: auto;
    }
    .buttondiv{
      margin-top: 70px;
      margin-bottom: 50px;
    }
    .button{
      box-shadow: none;
      width: 30%;
      font-size: 25px;
      letter-spacing: 3px;
      word-spacing: 20px;
    }
    .button:hover {
      box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
    }
    .SaA,
    .p25,
    .p27,
    .p24,
    .p15{
      padding-left: 250px;
      padding-right: 250px;
      line-height: 30px;
      padding-bottom: 30px;
    }
    .p25 a{
        border-bottom: none;
    }
    .p25 a:hover{
      border-bottom: 4px solid #37BFAF
    }
    .goals{
      margin-left: 20%;
      margin-top: 30px;
      margin-bottom: 30px;
      margin-right: 20%;
    }
    .modal-content{
      width: 65%;
    }
    .route27 h2,
    .route24 h2,
    .route15 h2{
      padding-top: 20px;
      padding-bottom: 50px;
      font-size: 50px;
      text-align: center;
    }
    iframe{
      display: block;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 5px;
    }
    .galleryoa{
      margin-top: 30px;
      margin-bottom: 100px;
    }
    .galleryoa2{
      margin-top: 50px;
      margin-bottom: 30px;
    }
    input[type=submit]:hover {
      background-color: #009C77;
    }
    .contactp{
      padding-top: 40px;
      padding-left: 250px;
      padding-right: 250px;
      line-height: 30px;
    }
}
